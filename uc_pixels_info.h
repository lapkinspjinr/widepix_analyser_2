#ifndef UC_PIXELS_INFO_H
#define UC_PIXELS_INFO_H

#include <QtMath>
#include <qvector.h>

#include <vector>
#include <algorithm>



/*!
 * \brief Класс-контейнер для статистических данных
 *
 * Данный класс хранит и рассчитывает статистические данные определенных областей детектора.
 * Он используется в классе UC_plot и передается им в сигнале как контейнер внешнему классу для вывода.
 */
class UC_pixels_info {

public :

    /// Типы областей детектора
    typedef enum {
        UTE_PA_chip1,                   // [0]  ///< Первый чип
        UTE_PA_chip2,                   // [1]  ///< Второй чип
        UTE_PA_chip3,                   // [2]  ///< Третий чип
        UTE_PA_chip4,                   // [3]  ///< Четвертый чип
        UTE_PA_chip5,                   // [4]  ///< Пятый чип
        UTE_PA_chip6,                   // [5]  ///< Шестой чип
        UTE_PA_chip7,                   // [6]  ///< Седьмой чип
        UTE_PA_chip8,                   // [7]  ///< Восьмой чип
        UTE_PA_chip9,                   // [8]  ///< Девятый чип
        UTE_PA_chip10,                  // [9]  ///< Десятый чип
        UTE_PA_chip11,                  // [10] ///< Одиннадцатый чип
        UTE_PA_chip12,                  // [11] ///< Двенадцатый чип
        UTE_PA_chip13,                  // [12] ///< Тринадцатый чип
        UTE_PA_chip14,                  // [13] ///< Четырнадцатый чип
        UTE_PA_chip15,                  // [14] ///< Пятнадцатый чип
        UTE_PA_widepix,                 // [15] ///< Детектор целиком
        UTE_PA_roi,                     // [16] ///< Область интереса
        UTE_PA_masked,                  // [17] ///< Маскированные пиксели
        UTE_PA_unmasked,                // [18] ///< Не маскированные пиксели
        UTE_PA_not_overflow,            // [19] ///< Не переполненные пиксели
        UTE_PA_roi_unmasked_not_ovf,    // [20] ///< Не переполненные и немаскированные пиксели в области интереса
    } UTE_pixels_area;

    typedef struct {
        bool max_enable;
        bool min_enable;
        bool sum_enable;
        bool mean_enable;
        bool median_enable;
        bool zeros_enable;
        bool std_dev_enable;
        bool snr_enable;
        bool id1_enable;
    } UTStr_data_enable;
private :
    UTE_pixels_area pixels_area;    ///< Положение пикселей, о которых храняться данные
    int n;                          ///< Число пикселей
    double min;                     ///< Минимальное значение
    double max;                     ///< Максимальное значение
    double sum;                     ///< Сумма значений
    double mean;                    ///< Среднее значение
    double median;                  ///< Медианное значение
    int zeros;                      ///< Число нулевых значений в данной области
    int overflows;                  ///< Число переполнений в данной области
    int masked;                     ///< Число маскированных пикселей в данной области
    double std_dev;                 ///< Стандартное отклонение
    double snr;                     ///< Отношение сигнал - шум
    QVector<double> data;

    UTStr_data_enable data_enable;
public :
    /*!
     * Конструктор. Создает экземпляр класа и заполняет все поля нулями.
     * \brief UC_pixels_info Конструктор. Создает экземпляр класа и заполняет все поля нулями.
     * \param[in] pixels_area Область пикселей, о которых будут храниться данные.
     */
    UC_pixels_info(UTE_pixels_area pixels_area);
    /*!
     * Cброс данных.
     * \brief U_reset Cброс данных.
     */
    void U_reset();

    /*!
     * Функции для первого цикла добавления данных.
     */

    /*!
     * Добавляет значение пикселя на первом цикле. Задавать значения нудно два раза в виде двух циклов.
     * На первом цикле вычисляются среднее значение. На втором цикле вычисляются стандартное отклонение и отношение сигнал - шум,
     * так как они зависят от среднего значения и не могут вычисляться одновременно с ним.
     * \brief U_add_pixel_1 Добавить данные на первом цикле.
     * \param[in] z значение пикселя
     */
    void U_add_pixel(double z);
    /*!
     * Добавляет маскированный пиксель.
     * \brief U_add_masked Добавить маскированный пиксель.
     */
    void U_add_masked();
    /*!
     * Добавляет переполненный пиксель.
     * \brief U_add_overflow Добавить переполненный пиксель.
     */
    void U_add_overflow();
    /*!
     * Окончание первого цикла добавления данных.
     * Расчет параметров после первого цикла.
     * Требуется для расчета среднего, медианы.
     * \brief U_finalize_1 Окончание первого цикла добавления данных.
     */
    void U_finalize();

    /*!
     * Функции для доступа к данным
     */

    /*!
     * Возвращает область пикселей.
     * \brief U_get_pixel_area Получить область пикселей.
     * \return Область пикселей, о которых хранятся данные.
     */
    UTE_pixels_area U_get_pixel_area();
    /*!
     * Возвращает число пикселей в данной области.
     * \brief U_get_n Получить число пикселей в данной области.
     * \return Число пикселей в данной области.
     */
    int U_get_n();
    /*!
     * Возвращает минимальное значение.
     * \brief U_get_min Получить минимальное значение.
     * \return Минимальное значение.
     */
    double U_get_min();
    /*!
     * Возвращает максимальное значение.
     * \brief U_get_max Получить максимальное значение.
     * \return Максимальное значение.
     */
    double U_get_max();
    /*!
     * Возвращает сумму значений пикселей из области.
     * \brief U_get_sum Получить сумму значений пикселей из области.
     * \return Сумма значений.
     */
    double U_get_sum();
    /*!
     * Возвращает среднее значение пикселей в области.
     * \brief U_get_mean Получить среднее значение пикселей в области.
     * \return Среднее значение.
     */
    double U_get_mean();
    /*!
     * Возвращает медианное значение пикселей в области.
     * \brief U_get_median Получить медианное значение пикселей в области.
     * \return Медианное значние.
     */
    double U_get_median();
    /*!
     * Возвращает число нулевых значений пикселей в области.
     * \brief U_get_zeros Получить число нулевых значений пикселей в области.
     * \return Число нулей.
     */
    int U_get_zeros();
    /*!
     * Возвращает число переполненных пикселей в области.
     * \brief U_get_overflows Получить число переполненных пикселей в области.
     * \return Число переполненных пикселей.
     */
    int U_get_overflows();
    /*!
     * Возвращает число замаскированных пикселей в области.
     * \brief U_get_masked Получить число замаскированных пикселей в области.
     * \return Число замаскированных пикселей.
     */
    int U_get_masked();
    /*!
     * Возвращает стандартное отклонение пикселей в области.
     * \brief U_get_std_dev Получить стандартное отклонение пикселей в области.
     * \return Стандартное отклонение.
     */
    double U_get_std_dev();
    /*!
     * Возвращает отношение сигнал - шум в области.
     * \brief U_get_snr Получить отношение сигнал - шум в области.
     * \return Отношение сигнал - шум.
     */
    double U_get_snr();

    //
    void U_set_data_enable(UTStr_data_enable enable);

};
#endif // UC_PIXELS_INFO_H
